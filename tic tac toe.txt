import math

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(board, player):
    win_conditions = [
        [board[0][0], board[0][1], board[0][2]],
        [board[1][0], board[1][1], board[1][2]],
        [board[2][0], board[2][1], board[2][2]],
        [board[0][0], board[1][0], board[2][0]],
        [board[0][1], board[1][1], board[2][1]],
        [board[0][2], board[1][2], board[2][2]],
        [board[0][0], board[1][1], board[2][2]],
        [board[2][0], board[1][1], board[0][2]],
    ]
    return [player, player, player] in win_conditions

def check_draw(board):
    for row in board:
        if " " in row:
            return False
    return True
def get_empty_cells(board):
    cells = []
    for x in range(3):
        for y in range(3):
            if board[x][y] == " ":
                cells.append((x, y))
    return cells

def minimax(board, depth, is_maximizing):
    if check_winner(board, "A"):
        return 1
    if check_winner(board, "@"):
        return -1
    if check_draw(board):
        return 0

    if is_maximizing:
        best_score = -math.inf
        for cell in get_empty_cells(board):
            board[cell[0]][cell[1]] = "A"
            score = minimax(board, depth + 1, False)
            board[cell[0]][cell[1]] = " "
            best_score = max(score, best_score)
        return best_score
    else:
 best_score = math.inf
        for cell in get_empty_cells(board):
            board[cell[0]][cell[1]] = "@"
            score = minimax(board, depth + 1, True)
            board[cell[0]][cell[1]] = " "
            best_score = min(score, best_score)
        return best_score

def ai_move(board):
    best_score = -math.inf
    best_move = None
    for cell in get_empty_cells(board):
        board[cell[0]][cell[1]] = "A"
        score = minimax(board, 0, False)
        board[cell[0]][cell[1]] = " "
        if score > best_score:
            best_score = score
            best_move = cell
    board[best_move[0]][best_move[1]] = "A"

def player_move(board):
    move = input("Enter your move (row and column): ").split()
    x, y = int(move[0]), int(move[1])
    if board[x][y] == " ":
        board[x][y] = "@"
 else:
        print("Invalid move, try again.")
        player_move(board)

def play_game():
    board = [[" " for _ in range(3)] for _ in range(3)]
    while True:
        print_board(board)
        if check_winner(board, "A"):
            print("AI wins!")
            break
        if check_winner(board, "@"):
            print("You win!")
            break
        if check_draw(board):
            print("It's a draw!")
            break

        player_move(board)
        if check_winner(board, "@") or check_draw(board):
            continue

        ai_move(board)
        if check_winner(board, "A") or check_draw(board):
            continue

play_game()